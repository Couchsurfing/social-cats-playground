/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    kotlin("jvm")
    `application`
}

tasks.withType<org.jetbrains.kotlin.gradle.tasks.KotlinCompile>().configureEach {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

val getItemJar by configurations.creating {

}

dependencies {
    implementation(kotlin("stdlib"))

    implementation("software.amazon.awscdk:dynamodb:_")
    implementation("software.amazon.awscdk:apigatewayv2:_")
    implementation("software.amazon.awscdk:apigatewayv2-integrations:_")
    implementation("software.amazon.awscdk:lambda:_")
    implementation("software.amazon.awscdk:core:_")
    implementation("software.amazon.awscdk:logs:_")

    testImplementation("org.junit.jupiter:junit-jupiter-api:_")
    testImplementation("org.junit.jupiter:junit-jupiter-engine:_")
    testImplementation("org.assertj:assertj-core:_")

    getItemJar(project(":backend:functions:getItem", configuration = "shadow"))
}

tasks.register<Copy>("copyGetItemFunction") {
    from(getItemJar)
    into("$buildDir/functions")
}

tasks.register("generateFunctionPath") {
    val functions : File = tasks["copyGetItemFunction"].outputs.files.singleFile
    doLast{
        val f = File("$buildDir/functions/paths.properties")
            .printWriter().use { out ->
                functions.walk().forEach {
                    if (!it.isDirectory){
                        val name = it.name.substringBefore("-")
                        out.println("$name=${it}")
                    }
                }
            }
    }
}

tasks["run"].dependsOn(tasks["generateFunctionPath"])


application {
    mainClassName = "com.myorg.BackendApp"
}

tasks.withType<org.gradle.api.tasks.JavaExec>().configureEach  {
    args = listOf("$buildDir/functions/paths.properties")
}

group = "com.myorg"
version = "0.1"
description = "backend"